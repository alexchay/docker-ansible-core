name: Image Build
description: Build and push Docker image to GitHub Container Registry

on:
  workflow_dispatch:
    inputs:
      ansible_core_version:
        description: "Ansible Core version to build (e.g., 2.18.6)"
        required: false
        type: string
        default: "2.18.6"
      base_image_tag:
        description: "Base image tag to use for the build (e.g., 3.12.2-slim)"
        required: false
        type: string
        default: "3.12-slim"
      build_image_tags:
        description: "Comma-separated list of tags to apply to the image (e.g., 2.18.6, latest)"
        required: false
        type: string
        default: "3.12-slim"

concurrency:
  group: "${{ github.repository_id }}"

jobs:
  setup_build_env:
    name: Setup build environment
    runs-on: ubuntu-latest

    outputs:
      build_image_name: ${{ steps.setup.outputs.BUILD_IMAGE_NAME }}
      build_image_tags: ${{ steps.setup.outputs.BUILD_IMAGE_TAGS }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        id: setup
        run: |
          echo "Setting up build environment..."
          # Check if ansible core version is provided from workflow_dispatch user's input and replace it in the .build.env file
          if [ -n "${{ inputs.ansible_core_version }}" ]; then
            sed -i 's/^ANSIBLE_CORE_VERSION=.*/ANSIBLE_CORE_VERSION=${{ inputs.ansible_core_version }}/' .github/.build.env
          fi

          # Check if the base image name is provided from workflow_dispatch user's input and replace it in the .build.env file
          if [ -n "${{ inputs.base_image_tag }}" ]; then
            sed -i 's/^BASE_IMAGE_TAG=.*/BASE_IMAGE_TAG=${{ inputs.base_image_tag }}/' .github/.build.env
          fi
          # Check if the image tag is provided from workflow_dispatch user's input
          if [ -n "${{ inputs.build_image_tags }}" ]; then
            sed -i 's/^BUILD_IMAGE_TAGS=.*/BUILD_IMAGE_TAGS=${{ inputs.build_image_tags }}/' .github/.build.env
          fi

          # This file 'build.env' should contain the environment variables used in the Dockerfile and the build process.
          set -a; source .github/.build.env; set +a;
          echo "BUILD_IMAGE_NAME=$BUILD_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "BUILD_IMAGE_TAGS=$BUILD_IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Upload .build.env as artifact
        uses: actions/upload-artifact@v4
        with:
          name: .build.env-${{ steps.setup.outputs.BUILD_IMAGE_TAGS }}-${{ github.sha }}
          path: .github/.build.env
          retention-days: 1
          overwrite: true
          include-hidden-files: true


  build:
    name: 'Build ${{ needs.setup_build_env.outputs.build_image_name }}:${{ needs.setup_build_env.outputs.build_image_tags }}'
    permissions:
      contents: read
      packages: write
    needs: setup_build_env
    uses: alexchay/github-ci/.github/workflows/build_and_push_image_to_ghcr.yml@main
    with:
      build_env_file: .build.env-${{ steps.setup.outputs.BUILD_IMAGE_TAGS }}-${{ github.sha }}
      build_image_name: ${{ needs.setup_build_env.outputs.build_image_name }}
      build_image_tags: ${{ needs.setup_build_env.outputs.build_image_tags }}
